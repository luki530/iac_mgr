# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

broker.id=${KAFKA_BROKER_ID}

broker.rack=${KAFKA_BROKER_RACK}
replica.selector.class=${KAFKA_REPLICA_SELECTOR_CLASS}

zookeeper.connect=${ZOOKEEPER_CONNECTION_STRING}

advertised.listeners=PLAINTEXT://${fqdn}:9092

delete.topic.enable=${KAFKA_DELETE_TOPIC_ENABLE}
socket.send.buffer.bytes=${KAFKA_SOCKET_SEND_BUFFER_BYTES}
socket.receive.buffer.bytes=${KAFKA_SOCKET_RECEIVE_BUFFER_BYTES}
socket.request.max.bytes=${KAFKA_SOCKET_REQUEST_MAX_BYTES}
log.dirs=${KAFKA_LOG_DIRS}
num.partitions=${KAFKA_NUM_PARTITIONS}
num.recovery.threads.per.data.dir=${KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR}
offsets.topic.replication.factor=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
transaction.state.log.replication.factor=${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
transaction.state.log.min.isr=${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
log.flush.interval.messages=${KAFKA_LOG_FLUSH_INTERVAL_MESSAGES}
log.flush.interval.ms=${KAFKA_LOG_FLUSH_INTERVAL_MS}
log.retention.hours=${KAFKA_LOG_RETENTION_HOURS}
log.roll.hours=${KAFKA_LOG_ROLL_HOURS}
log.segment.bytes=${KAFKA_LOG_SEGMENT_BYTES}
log.retention.check.interval.ms=${KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS}
offsets.retention.minutes=${KAFKA_OFFSETS_RETENTION_MINUTES}
zookeeper.connection.timeout.ms=${KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS}
default.replication.factor=${KAFKA_DEFAULT_REPLICATION_FACTOR}
auto.leader.rebalance.enable=${KAFKA_AUTO_LEADER_REBALANCE_ENABLE}
background.threads=${KAFKA_BACKGROUND_THREADS}
min.insync.replicas=${KAFKA_MIN_INSYNC_REPLICAS}
num.io.threads=${KAFKA_NUM_IO_THREADS}
num.network.threads=${KAFKA_NUM_NETWORK_THREADS}
num.replica.fetchers=${KAFKA_NUM_REPLICA_FETCHERS}
replica.high.watermark.checkpoint.interval.ms=${KAFKA_REPLICA_HIGH_WATERMARK_CHECKPOINT_INTERVAL_MS}
replica.lag.time.max.ms=${KAFKA_REPLICA_LAG_TIME_MAX_MS}
unclean.leader.election.enable=${KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE}
broker.id.generation.enable=${KAFKA_BROKER_ID_GENERATION_ENABLE}
controlled.shutdown.max.retries=${KAFKA_CONTROLLED_SHUTDOWN_MAX_RETRIES}
group.initial.rebalance.delay.ms=${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
zookeeper.sync.time.ms=${KAFKA_ZOOKEEPER_SYNC_TIME_MS}
inter.broker.protocol.version=${KAFKA_INTER_BROKER_PROTOCOL_VERSION}
log.message.format.version=${KAFKA_LOG_MESSAGE_FORMAT_VERSION}

